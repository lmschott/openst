{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/","title":"Open-ST API (computational tools)","text":"<p>The API will be available soon</p>"},{"location":"api/#introduction","title":"Introduction","text":"<p>Explain the package, there are several tools: alignment, segmentation, visualization, conversion.</p>"},{"location":"api/#openstbarcode_preprocessing","title":"openst.barcode_preprocessing","text":"<p>From the first sequencing, code to preprocess the barcodes (uses bcl2fastq)</p>"},{"location":"api/#openstfrom_3d_registration","title":"openst.from_3d_registration","text":"<p>Explain all arguments; FAQ</p>"},{"location":"api/#openstimage_preprocess","title":"openst.image_preprocess","text":"<p>This allows stitching and CUT restoration (if keyence)</p>"},{"location":"api/#openstimage_stitch","title":"openst.image_stitch","text":"<p>Merge various image tiles into one (via image stitching)</p>"},{"location":"api/#openstpairwise_aligner","title":"openst.pairwise_aligner","text":"<p>Explain all the arguments; FAQ</p>"},{"location":"api/#openstreport","title":"openst.report","text":"<p>Explain all the arguments; FAQ. This accepts any metadata from any other program, and creates an HTML report.</p>"},{"location":"api/#openstsegment","title":"openst.segment","text":"<p>Explain all arguments; FAQ</p>"},{"location":"api/#openstspatial_stitch","title":"openst.spatial_stitch","text":"<p>Merge various spatial transcriptomic tiles into one (via coordinate system stitching)</p>"},{"location":"api/#openstto_3d_registration","title":"openst.to_3d_registration","text":"<p>Explain all arguments</p>"},{"location":"api/#opensttranscript_assign","title":"openst.transcript_assign","text":"<p>Explain all the arguments; FAQ</p>"},{"location":"api/#openst3d_visualization","title":"openst.3d_visualization","text":"<p>This script contains code that allows to run the visualization</p>"},{"location":"faq/","title":"FAQs","text":"<p>Do you have questions about the experimental or computational aspects of Open-ST? We do our best to answer all of your questions on this page. If you can't find your question  below, ask it on our discussion board!</p>"},{"location":"faq/#tissue-handling-and-sectioning","title":"Tissue handling and sectioning","text":"<p>What is the recommended freezing and embedding process?</p> <p>Open-ST requires the use of unfixed fresh-frozen tissue, embedded in OCT. An optimal embedding process is required to avoid the formation of freezing artifacts. The best results are achieved when tissue is frozen in a fast and uniform way. We recommend following 10X Visium's protocol for simultaneous freezing and embedding in their Tissue Preparation guide</p> <p>However, is also possible to embed already snap-frozen tissue in OCT using powdered dry ice, or an isopentane bath in liquid nitrogen or dry ice. In this case, be aware of:</p> <ul> <li>Once tissue is frozen avoid melting of the tissue when embedding in OCT.</li> <li>Do not immerge the tissue directly into liquid nitrogen (it will burn the edges!).</li> <li>Keep the embedding mold bases fully covered by dry ice or the cold isopentane bath to allow homogeneous freezing.</li> </ul> <p>What tissue section thickness is recommended?</p> <p>We section the tissue at a thickness of 10 um. This can be adapted if neccessary, but permeabilization time may change consequently. Thicker sectioning may also increase contamination from the cytoplasm of other cells in the z-plane.</p> <p>What cutting temperature is recommended?</p> <p>The optimal cutting temperature depends on the tissue being sectioned. As a starting point, page 91 in this reference by Epredia is helpful.</p>"},{"location":"faq/#sample-handling","title":"Sample handling","text":"<p>Are technical replicates required?</p> <p>As we have observed a high reproducibility across technical replicates (consecutive sections), technical replicates are not essential.</p> <p>How many sections (conditions/sample types) can be processed at once?</p> <p>Multiple samples can be processed at once with the use of a multiwell chamber hybridization cassette (such as this one by ArrayJet (product code: 206862)) (ArrayJet, accessed 13.11.2023). </p> <p>This cassette has sixteen 7 x 7 mm wells, each fitting one capture area; thus, allowing 16 samples or conditions to be processed simultaneously. We recommend handling a maximum of 15 capture areas per person for protocol steps 3.1 to 3.5 (until overnight incubation for reverse transcription).</p> <p>Moreover, Open-ST libraries are indexed on the p7-adapter side, allowing multiplexing of samples within one NGS run. </p> <p>What are the best practices to avoid cross-contamination?</p> <p>In order to avoid any RNA contamination is important to wipe down the cryostat and any tools used (brushes, tweezers) with 80%-100% ethanol before sectioning. Additionaly, change the blade and wipe down the cryostat and tools in between sectioning different samples. </p> <p>What pepsin incubation times should I test?</p> <p>It is important to set the permeabilization condition for each tissue type.  We recommend to test at least a range including 15 min, 30 min, and 60 min with two different concentration (0.7 and 1.4 U/uL). </p> <p>It is preferable to chose the minimum incubation time/ enzyme concentration that gives the maximum RNA capture (see Permeabilization).</p> <p>What tissues have already been tested with Open-ST?</p> <p>Several tissues have been tested using Open-ST, including in-vitro 3D-cultures. Here, we list the tested tissues with the permeabilization condition used:</p> HumanMouse Tissue type Permeabilization condition (time, pepsin concentration) Metastatic lymph node 45 min, 1.4 U/uL Healthy  lymph node 45 min, 1.4 U/uL Head and neck squamous cell carcinoma 45 min, 1.4 U/uL iPSC-derived Brain Organoids 15 - 30 min, 0.7 U/uL Tissue type Permeabilization conditions Mouse head (embryo E13) 30 min, 0.7 U/uL Mouse brain 30 min, 0.7 U/uL"},{"location":"faq/#capture-area","title":"Capture area","text":"<p>Can you store capture area pieces?</p> <p>Yes. We have successfully generated libraries from capture areas stored &gt;12 months. We recommend storage at -20\u00b0C or -80\u00b0C with silica beads. </p> <p>Can tissue sections be placed on a capture area and stored before library preparation?</p> <p>Yes. We have stored capture areas with tissue sections for 1 week at -80\u00b0C before proceeding with library preparation and have not observed an effect mRNA capture (qPCR). </p> <p>Sections on capture areas were stored before methanol fixation. Once the tissue was placed on the capture area, care was taken to keep it frozen until library preparation.</p> <p>Longer storage may be possible, but has not been systematically tested. </p>"},{"location":"faq/#general-protocol","title":"General protocol","text":"<p>What instruments/equipment is required to perform the Open-ST protocol?</p> <p>Open-ST was developed with the idea to make it accessible to any laboratory. It requires standard lab equipment: </p> <ul> <li>Capture area generation: Illumina\u00ae NovaSeq6000, 3D-printer (capture areas can be made without a 3D-printed cutting guide, if this is not available. A cutting guide is recommended for ease-of-use, preventing scratches and irregular capture areas)  </li> <li>Library preparation: Cryostat, hybridization oven, thermocycler, Bluepippin or PippinHT (alternatively, agarose gel and DNA extraction can be done manually)</li> <li>Imaging: Brightfield microscope / Fluorescence microscope </li> <li>Quality control: Qubit, qPCR, automated gel electrophoresis (Bioanalyzer, TapeStation, Fragment analyzer)</li> <li>Sequencing: various sequencers can be used, as long as a minimum of 100 cylces can be sequenced (ex., Illumina\u00ae NextSeq500/550, NextSeq2000, NovaSeq6000, NovaSeqX(plus))</li> </ul>"},{"location":"faq/#imaging","title":"Imaging","text":"<p>Are immunohistochemical (IHC) or immunofluorescence (IF) stainings compatible with Open-ST?</p> <p>IHC/IF staining may reduce the quality of the resulting Open-ST library, since staining occurs before RNA capture and may lead to RNA degradation.  </p> <p>We have successfully applied hematoxilin and eosin (H&amp;E) staining, as well as fluorescent cytoskeletal (Phalloidin) and nuclei (DAPI) staining, as part of the Open-ST workflow.</p>"},{"location":"faq/#library-preparation-and-sequencing","title":"Library preparation and sequencing","text":"<p>How does a good library profile look like before and after size selection?</p> <p>A good library profile is smooth without any short fragment peaks or evident peaks inside the library range. If small length peaks remain after library size selection, they should be removed with an additional size selection (agarose gel or beads). </p> <p>Evident peaks inside the library range could be due to over-amplification of a low complexity library. If possible, we recommend checking previous protocol steps, including RNA quality control, permeabilization condition, amplification cycling number.</p> <p>What is the recommended sequencing depth?</p> <p>Sequencing depth requirements vary with tissue section size, coverage of capture area and experimental goals. For reference, for a 3x4 mm section we obtain a median of around 900 UMIs per cell when investing 500 million sequencing reads. Shallow sequencing can always be performed first to assess general library quality (%spatial mapping, % uniquely mapping to genome, % rRNA, % mt-encoded). </p>"},{"location":"faq/#pairwise-alignment","title":"Pairwise alignment","text":"<p>The fiducial marks cannot be detected/are not visible)</p> <p>Sometimes, fiducial marks might not be visible when imaging thick tissue (we have noticed this with &gt; 10 \u00b5m thickness) or under areas with high cellular density. Thus, automatic coarse alignment will work, but the fine alignment might fail, as the model cannot find these markers in the image. </p> <p>We recommend using the GUI to automatically select keypoints between the two modalities. If more than 2 are visible per tile, we recommend selecting the fiducial markers manually. If these are not visible, you can select alternative keypoints (i.e., morphological features that look similar between the ST and staining image modalities). </p> <p>In the latter case, we cannot ensure that the alignment accuracy will lead to subcellular resolution, which is diagnosed with the distance from fiducials across modalities.</p> <p>In manual alignment mode, how many fiducials/features should I select per tile?</p> <p>Given that a rgiid transformation model is estimated from the selected pairs of keypoints, we recommend at least 2 points. The more corresponding points are selected, the better.</p>"},{"location":"faq/#image-segmentation","title":"Image segmentation","text":"<p>The segmentation did not perform well</p> <p>We provide an interface to the default, pre-trained cellpose models, as well as our fine-tuned openst_he model. We have tested this on a wide diversity of tissues, but it is possible that different microscopy setups and imaged tissues deliver different segmentation performance. </p> <p>Especially, tissues with higher cellular densities and lower contrast between background/nuclei (or cells) might perform worse. Thus, we recommend referring to the cellpose tutorial on how to train your own model.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Welcome! Here, we provide comprehensive resources to help you generate and analyse Open-ST data in your lab.</p> <p>Open-ST is a spatial transcriptomics method that enables efficient whole-transcriptome capture at subcellular resolution. In our preprint, we have demonstrated Open-ST's wide applicability, showing robust transcriptome capture across various mouse and human tissues.  Our method is cost-efficient, straightforward to employ, and includes open-source software for seamless data processing and analysis.</p> <p>Here, you can find detailed step-by-step descriptions of the experimental and the computational workflows. In a FAQ section we address commonly asked questions. Via our discussion board and our chat, you can submit your own questions, and we will do our best to provide answers. </p> <p>Also on this website, we showcase example datasets. </p>"},{"location":"computational/generate_expression_matrix/","title":"Generating a cell-by-gene matrix","text":"<p>After pairwise alignment, the same coordinate system is shared between the spatial barcodes and the staining images. </p> <p>However, analysis (e.g., clustering, pseudotime, DGE...) is performed on single cells, not on individual capture areas  (0.5 \u03bcm in the current version of the protocol).</p> <p>So, we show how to aggregate the \\(N\\times G\\) matrix (\\(N\\) spots; \\(G\\) genes) into a \\(M\\times G\\) matrix (\\(M\\) segmented cells; \\(G\\) genes), where \\(N\\) maps to \\(M\\) via the segmentation mask.</p>"},{"location":"computational/generate_expression_matrix/#segmentation-of-staining-image","title":"Segmentation of staining image","text":"<p>To create such a spatial cell-by-gene (\\(M\\times G\\)) expression matrix, you will first need a segmentation mask.</p> <p>We efficiently segment cells (or nuclei) from staining images using cellpose. We provide a model that we fine-tuned for segmentation of fresh-frozen, H&amp;E-stained tissue, here. You can specify any other model that works best for your data - refer to the cellpose documentation.</p> <p><pre><code>openst segment \\\n    --adata &lt;path_to_aligned_h5ad&gt; \\\n    --image-in &lt;image_in_path&gt; \\\n    --output-mask &lt;mask_out_path&gt; \\\n    --model &lt;path&gt;/HE_cellpose_rajewsky \\\n    --chunked \\ # divides the image into smaller chunks (lower memory usage)\n    --gpu \\ # uses GPU for segmentation (Nvidia CUDA)\n    --num-workers 8 \\ # processes the image in parallel\n    --dilate-px 10 # will extend the segmentation 10 micron around\n</code></pre> Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;path_to_aligned_h5ad&gt;</code> is the full path to the <code>h5ad</code> file after pairwise alignment;  <code>&lt;image_in_path&gt;</code> is the path to the image - a path to a file, or a location inside the <code>h5ad</code> file, like <code>'uns/spatial_pairwise_aligned/staining_image_transformed'</code> (our recommendation). <code>&lt;mask_out_path&gt;</code> is the location where the segmentation mask will be saved - can be a file or a location in the <code>h5ad</code> file, like <code>uns/spatial_pairwise_aligned/mask_transformed_10px</code> (our recommendation). The <code>&lt;model_path&gt;</code> for the parameter <code>--model</code> is the name or location of the cellpose model weights.</p> <p>We recommend using the model provided in our repo for segmentation of H&amp;E images The rest of parameters can be checked with <code>openst segment --help</code>.</p> <p>Tip</p> <p>If your sample also contains very large cells (e.g., adipocytes) that are not segmented with the previous parameters,  you can perform a second segmentation with a cellpose model, adjusting the diameter parameter.</p> <pre><code>openst segment \\\n     --adata &lt;path_to_aligned_h5ad&gt; \\\n     --image-in &lt;image_in_path&gt; \\\n     --output-mask &lt;mask_out_path_larger&gt; \\\n     --model &lt;path&gt;/HE_cellpose_rajewsky \\\n     --chunked \\ # divides the image into smaller chunks (lower memory usage)\n     --gpu \\ # uses GPU for segmentation (Nvidia CUDA)\n     --num-workers 8 \\ # processes the image in parallel\n     --dilate-px 50 \\\n     --diameter 50 # diameter for the larger cell type\n</code></pre> <p>Replace the placeholders (<code>&lt;...&gt;</code>) as before; in this case, the placeholder <code>&lt;mask_out_path_larger&gt;</code> must be different from the  <code>&lt;mask_out_path&gt;</code> provided above.</p> <p>And then, you can combine the segmentation masks of both diameter configurations.  This command will apply an \"AND\" between all images, to only preserve mask of non-overlapping,  with the hierarchy provided in the <code>--image-in</code> argument (first has higher priority).</p> <pre><code>openst segment_merge \\\n     --adata &lt;path_to_aligned_h5ad&gt; \\\n     --mask-in &lt;mask_a&gt; &lt;mask_b&gt;\n     --mask-out &lt;mask_combined&gt;\n</code></pre> <p>Replace the placeholders (<code>&lt;...&gt;</code>) as before; in this case, the placeholder <code>&lt;mask_a&gt;</code>, <code>&lt;mask_b&gt;</code>... must correspond  to the placeholders <code>&lt;mask_out_path&gt;</code>, <code>&lt;mask_out_path_larger&gt;</code>...</p>"},{"location":"computational/generate_expression_matrix/#assigning-transcripts-to-segmented-cells","title":"Assigning transcripts to segmented cells","text":"<p>Now, we aggregate the initial \\(N\\times G\\) matrix into an \\(M\\times G\\) matrix, where \\(N\\) maps to \\(M\\) via the segmentation mask.</p> <p>This step allows you to associate capture spots with segmented cells.</p> <pre><code>openst transcript_assign \\\n    --adata &lt;path_to_aligned_h5ad&gt; \\\n    --spatial-key spatial_pairwise_aligned_fine \\\n    --mask-in-adata \\\n    --mask &lt;mask_out_path&gt; \\\n    --output &lt;path_to_sc_h5ad&gt;\n</code></pre> <p>Replace the placeholders (<code>&lt;...&gt;</code>) as before; in this case, the placeholder <code>&lt;mask_in_path&gt;</code> must be set to be equal to the <code>&lt;mask_out_path&gt;</code> (or <code>&lt;mask_combined&gt;</code> if you ran multiple segmentation); also, <code>&lt;path_to_sc_h5ad&gt;</code> must be set to a valid path and filename where the output cell-by-gene matrix (not barcode-by-cell) will be written.</p>"},{"location":"computational/generate_expression_matrix/#expected-output","title":"Expected output","text":"<p>After running the steps above, you will have a single <code>h5ad</code> file, containing the transcriptomic information per segmented cell, with spatial coordinates compatible with the staining image. The staining image and the segmented image are provided in this object, so it is possible to visualize it with squidpy or spatialdata, among other tools.</p> <p>So, this concludes the preprocessing of 2D spatial transcriptomics and imaging data of the Open-ST protocol. Next steps include 3D reconstruction, and downstream analysis of nD data.</p>"},{"location":"computational/getting_started/","title":"Getting started","text":"<p>After folowing the experimental protocol, we provide the <code>openst</code> python package for transforming the raw sequencing data into objects that can be used for spatial, single-cell analysis.</p> <p>More specifically, our pipeline consists of the following steps:</p> <ol> <li>Preprocessing of sequencing</li> <li>Preprocessing of imaging</li> <li>Align image to transcriptome: the spatial coordinates of transcripts are aligned     to the imaging modality.</li> <li>Generating a cell-by-gene matrix: transcripts     are quantified per cell using the segmentation information.</li> <li>3D reconstruction of tissue imaging and transcriptome from serial sections.    We provide tutorials for interactive visualization of 3D data.</li> </ol> <p>If you're familiar with Python, you can install <code>openst</code> with pip, the Python package manager. If not, we recommend using docker.</p>"},{"location":"computational/getting_started/#installation","title":"Installation","text":""},{"location":"computational/getting_started/#with-pip-recommended","title":"with pip recommended","text":"<p>The computational tools of the Open-ST workflow are published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install <code>openst</code> with:</p> <pre><code>pip install openst\n</code></pre> <p>Tip</p> <p>If you don't have prior experience with Python, we recommend reading Using Python's pip to Manage Your Projects' Dependencies, which is a really good introduction on the mechanics of Python package management and helps you troubleshoot if you run into errors.</p>"},{"location":"computational/getting_started/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> <pre><code>docker pull rajewsky/openst\n</code></pre> <p>The <code>openst</code> executable is provided as an entry point and <code>serve</code> is the default command.</p> <p>You can run a terminal for <code>openst</code> by running <pre><code>docker run -it openst\n</code></pre></p> <p>Optionally, you might want to enable X11 redirection to enable GUI support (e.g., for the <code>openst manual_pairwise_aligner_gui</code> tool). Follow these steps:</p> <ol> <li>Install X Server on your host machine if not already installed.</li> <li>Allow connections to your X Server by running the following command on your host: <pre><code>xhost +\n</code></pre></li> <li>Run the Docker container with the following additional options: <pre><code>docker run -it --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix openst\n</code></pre></li> </ol> <p>Now, you can execute PyQt5-based applications, and the GUI will be displayed on your host machine.</p> <p>Note</p> <ul> <li>Ensure that the X Server on your host allows connections (xhost +) before running the container,</li> <li>Make sure the necessary dependencies are installed on your host machine for PyQt5 applications.</li> <li>Remember to close the X Server connections after using the container:   <pre><code>xhost -\n</code></pre></li> </ul>"},{"location":"computational/getting_started/#with-git","title":"with git","text":"<p><code>openst</code> can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/rajewsky-lab/openst.git\n</code></pre> <p>Next, install the theme and its dependencies with:</p> <pre><code>pip install -e openst\n</code></pre>"},{"location":"computational/pairwise_alignment/","title":"Align image to transcriptome","text":"<p>In the previous step, the transcriptomic reads were processed and mapped in tissue space with spacemake. Now, in order to assign transcripts to cells from the staining images, we perform a pairwise alignment  between the imaging and spatial transcriptomics modality.</p> <p><code>openst</code> provides tools to automatically or manually carry out this pairwise alignment operation. For this, our tool generates pseudoimages of the spatial transcriptomics data, such that computer vision algorithms can be used for the alignment of true staining images and the ST modalities.</p> <p>The alignment workflow consists of two steps, that can be performed automatically or manually:</p> <ol> <li>Coarse alignment of H&amp;E images to pseudoimages of ST data - at low resolution.</li> <li>Fine alignment, using fiducial marks detected at both modalities for very precise alignment.</li> </ol>"},{"location":"computational/pairwise_alignment/#required-input-data","title":"Required input data","text":"<p>For automatic and manual alignment, two inputs are required: (1) a stitched tile-scan of  the staining image (see Preprocessing of imaging), and (2) a single h5ad file containing all the [barcoded tiles] of a sample  (see Preprocessing of sequencing). </p> <p>Warning</p> <p>Remember that spacemake generates one file per [barcoded tile],  and it will be necessary to perform [stitching of tiles] to obtain a single file with all tiles for a sample.</p>"},{"location":"computational/pairwise_alignment/#image-modality","title":"Image modality","text":"<p>The expected input for the image modality is a single tiff file of the whole tile-scan. Other formats, i.e., <code>jpeg</code> and <code>png</code> are also compatible. Make sure that the image is the full-resolution and not a downsampled version. As a rule of thumb, at least a few fiducial markers must be clearly distinguishable.</p> Good resolutionBad resolution <p>put image</p> <p>put image</p>"},{"location":"computational/pairwise_alignment/#spatial-transcriptomics-modality","title":"Spatial transcriptomics modality","text":"<p>The expected input for the spatial transcriptomics modality is a single h5ad file containing all the [barcoded tiles] of a sample. </p> <p>Warning</p> <p>Remember that spacemake generates one file per barcoded tile, and it will be necessary to perform stitching of tiles to obtain a single file with all tiles for a sample.</p> <p>The structure of this single file must follow the h5ad standard. In particular, we expect that there is a column under <code>obs</code> called <code>tile_id</code>, telling which tile a barcode belongs to. Also, we expect a column  <code>total_counts</code> indicating the total count of unique transcripts per barcode. Finally, we expect that there is a barcodes-by-2d matrix under <code>obsm</code> (with the name <code>spatial</code>), containing the spatial coordinates of the barcoded spots.</p>"},{"location":"computational/pairwise_alignment/#automated-workflow","title":"Automated workflow","text":"<p>If you want to save time (\ud83d\ude09), we provide a script that performs coarse and fine steps of alignment  automatically, by leveraging computer vision algorithms. To do so, make sure that you have the necessary input data; then, open a termina, type and run the following command (just an example):</p> <pre><code>openst pairwise_aligner \\\n    --image-in &lt;path_image&gt;/Image_Stitched_Composite.tif \\\n    --h5-in &lt;path&gt;/&lt;id&gt;_stitched_spots.h5ad \\\n    --h5-out &lt;path&gt;/&lt;id&gt;_stitched_spots_aligned.h5ad \\\n    --metadata-out &lt;path&gt;/&lt;id&gt;_alignment_metadata.json \\\n    --save-image-in-h5 \\\n    --n-threads &lt;cores&gt;\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;path_image&gt;</code> in the <code>--image-in</code> command  with the folder containing the stitched images of the current sample,  <code>&lt;path&gt;</code> in the <code>--h5-in</code> and <code>--h5-out</code> arguments  to contain the folder containing the  stitched barcoded tiles, and <code>&lt;id&gt;</code> with the <code>sample_id</code> as  defined in the spacemake project. Importantly, make sure to specify a path where the metadata output file  should be created via <code>--metadata-out</code>; this will be useful for a visual assessment of whether automated alignment worked or not. You can set <code>&lt;cores&gt;</code> depending on your machine (it defaults to 1).</p> <p>If you want to run only the coarse phase of the pairwise alignment (i.e., to run the fine alignment yourself), you can specify the argument <code>--only-coarse</code>. If you have a CUDA-compatible GPU in your machine, you can specify the argument <code>--device cuda</code> to accelerate feature detection and matching. </p> <p>Note</p> <p>For aligning STS to H&amp;E-stained tissues, we recommend leaving the arguments with the default values.  Anyway, you can get a full list of configurable parameters by running <code>openst pairwise_aligner --help</code>.</p>"},{"location":"computational/pairwise_alignment/#visual-assessment-of-alignment","title":"Visual assessment of alignment","text":"<p>Before proceeding to generating a cell-by-gene matrix, we strongly recommend visually assessing the alignment. For this, make sure that you specified a file name in the <code>--metadata-out</code>; then, you can open a terminal and run the following command:</p> <pre><code>openst report --metadata=&lt;metadata_file&gt; --html-out=&lt;path_to_html_file&gt;\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>) with the path to the metadata file (under <code>--metadata</code> argument), and the desired path and filename of the HTML report that will be generated (under <code>--html-out</code> argument). Running this command will create a HTML report containing images of the STS and staining image before and after alignment (coarse and/or fine, depending on the configuration).</p>"},{"location":"computational/pairwise_alignment/#manual-workflow","title":"Manual workflow","text":"<p>If the automatic alignment is not successful, or you prefer to run the alignment yourself, we provide a Graphical User Interface (GUI) tool that allows to perform manual alignment. This GUI only needs an input file generated by the <code>openst</code> pipeline containing the spatial transcriptome (barcoded spots-by-genes) and the staining image, for visual reference. Such a file is generated upon running <code>openst pairwise_aligner</code> (if you'd like to refine an automatic alignment). Alternatively, you can start from the same files as in the automated workflow, and merge them with the command:</p> <pre><code>openst manual_pairwise_aligner \\\n    --prepare-data \\\n    --h5-in &lt;path&gt;/&lt;id&gt;_stitched_spots_aligned.h5ad \\\n    --image-in &lt;path_image&gt;/Image_Stitched_Composite.tif\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;path_image&gt;</code> in the <code>--image-in</code> command  with the folder containing the stitched images of the current sample,  <code>&lt;path&gt;</code> in the <code>--h5-in</code> argument to contain the folder containing the  stitched barcoded tiles, and <code>&lt;id&gt;</code> with the <code>sample_id</code> as  defined in the spacemake project. </p> <p>Warning</p> <p>When <code>--h5-out</code> is not provided, the image will be stored as a new layer in the file specified at <code>--h5-in</code>.</p> <p>Once you have prepared the input file, you can run the GUI with the following command (no arguments are required)</p> <pre><code>openst manual_pairwise_aligner_gui\n</code></pre> <p>This GUI can be used to align the images from scratch, or to validate and refine the results from automatic coarse and/or fine alignment. In any case, the GUI is the same: we provide a video walthrough on how to use this GUI tool for all these cases. In summary, the GUI will allow you to create a <code>json</code> file containing a list of pairs of corresponding points between the staining and spatial transcriptome coordinates. This can be used later to transform the coordinates of the spatial trancriptomics to match the coordinate system of the image.</p> <p> Walkthrough of the GUI for manual alignment by @danilexn \u2013  5m \u2013 Learn how to align STS and imaging data in a step-by-step guide.</p> <p>Once the <code>json</code> list of point correspondences has been generated with the GUI, you can run the following command to transform the coordinates of the spatial transcriptomics to match the coordinates of the staining image. We provide three alternative commands, depending on whether you chose to align from scratch, make a manual fine alignment from a (manual or automated) coarse alignment,  or refine an automated (or manual) fine alignment</p> Coarse from rawFine from coarseRefine from fine <pre><code>openst manual_pairwise_aligner \\\n    --keypoints-json &lt;path_to_keypoints.json&gt; \\\n    --h5-in &lt;path_to_sts.h5ad&gt; \\\n    --coarse\n</code></pre> <pre><code>openst manual_pairwise_aligner \\\n    --keypoints-json &lt;path_to_keypoints.json&gt; \\\n    --h5-in &lt;path_to_sts.h5ad&gt; \\\n    --fine\n</code></pre> <pre><code>openst manual_pairwise_aligner \\\n    --keypoints-json &lt;path_to_keypoints.json&gt; \\\n    --h5-in &lt;path_to_sts.h5ad&gt; \\\n    --refine\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;path_to_keypoints.json&gt;</code> is the <code>json</code> file generated with the GUI, and  in the <code>--h5-in</code> argument to contain the folder containing the  stitched barcoded tiles, and <code>&lt;path_to_sts.h5ad&gt;</code> is the path to the h5ad file that was loaded with the GUI. Running the command above will generate a new obsm layer containing the transformed spatial transcriptome coordinates</p>"},{"location":"computational/pairwise_alignment/#expected-output","title":"Expected output","text":"<p>After running the automatic or manual alignment, you must have a single <code>h5ad</code> file, containing the transformed spatial coordinates. This will be used in the following step to aggregate the transcripts by a spatially-corresponding cell, in order to get a cell-by-gene matrix that can be used in later downstream analysis.</p>"},{"location":"computational/preprocessing_imaging/","title":"Preprocessing of imaging data","text":"<p>If you used our same experimental setup for imaging, you will obtain individual images as a result of performing imaging of the stained tissue in a tile-scan fashion. From this point, the open=ST pipeline expects to have a single image for the whole tile-scan, rather than individual files per tile.</p> <p>This step depends on the microscope used for imaging. In our implementation, we used a Keyence BZ-X710 inverted fluorescence phase contrast microscope, for which we provide open-source image stitching code - runs in any computer, independent of the software provided by the manufacturer.</p> <p>Warning</p> <p>If you use a different microscope, please refer to the documentation of your microscope  for how to stitch tile-scans into a single image. The Open-ST pipeline expects one single file in either  <code>tiff</code>, <code>jpeg</code> or <code>png</code> formats.</p>"},{"location":"computational/preprocessing_imaging/#stitching-with-the-script","title":"Stitching with the script","text":"<p>When using our same setup, we provide a script that automatically handles the imaging data generated  by the Keyence microscope and leverages the Grid/Collection stitching plugin included in Fiji to create a single, composite image of the tile-scan. Open a terminal, and run the following command:</p> <p><pre><code>openst image_stitch \\\n     --microscope='keyence' \\\n     --imagej-bin=&lt;path_to_fiji_or_imagej&gt; \\\n     --tiles-dir=&lt;path_to_tiles&gt; \\\n     --tiles-prefix=&lt;to_read&gt; \\\n     --tmp-dir=&lt;tmp_dir&gt; \\\n     --output-image=&lt;output_image&gt;\n</code></pre> Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;path_to_fiji_or_imagej&gt;</code> is the path where the Fiji executable is; <code>&lt;path_to_tiles&gt;</code> is the folder where the microscope has saved the individual image files with the tile scan and the <code>.bcl</code> file with metadata; <code>&lt;to_read&gt;</code> is the prefix that is common to all the tile image files, and <code>&lt;tmp_dir&gt;</code> is a path with write permission where the images will be temporarily moved. Finally, <code>&lt;output_image&gt;</code> is the full path  and file name that will be given to the stitched image (must be a writeable folder).</p> <p>Question</p> <p>If you don't know how to specify the <code>&lt;path_to_fiji_or_imagej&gt;</code>, please follow the official instructions provided  for Running Headless</p>"},{"location":"computational/preprocessing_imaging/#optional-addressing-image-irregularities","title":"(Optional) Addressing image irregularities","text":"<p>Most of the times, large images have uneven illumination, focus or noise. This can be challenging when doing downstream processing on these images, like segmentation, feature extraction or quantification (i.e., on fluorescence images).  There is a plethora of methods to address these issues (e.g., Flatfield Correction from BigStitcher, or CARE, to name some). This might be highly dependent on your microscope, imaging settings, sample type, sample width... Always look at your images so you can take an informed decision.</p> <p>In our publication, we leveraged a CUT model that allowed us to homogeneize the style of the whole tile-scan - that is, reduce possible biases in illumination, noise and focus - across the entire tile-scan. You can run this by running the following command on the stitched image.</p> <pre><code>openst image_preprocess \\\n     --input=&lt;path_to_input_image&gt; \\\n     --CUT \\\n     --CUT-model=&lt;path_to_model&gt; \\\n     --output=&lt;path_to_output&gt;\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;path_to_input_image&gt;</code> is the full path and file name of the previously stitched image; <code>&lt;path_to_model&gt;</code> is filename our pre-trained CUT model, and <code>&lt;output_image&gt;</code>  is the path to a folder (writeable) and desired filename for the output image.</p>"},{"location":"computational/preprocessing_imaging/#expected-output","title":"Expected output","text":"<p>After running the stitching (and optionally correction algorithms), you will have a single image file per sample. This, together with spatial transcriptomics data from the previous step, will be used in the following to align both modalities, and eventually obtain a file that can be used for the downstream spatial, single-cell analysis.</p>"},{"location":"computational/preprocessing_sequencing/","title":"Preprocessing sequencing data","text":"<p>After sequencing, you will get basecall files in <code>bcl</code> format, or raw reads in <code>fastq</code> format (see sequence file formats from Illumina's website). In the Open-ST experimental protocol, there are two points at which sequencing is performed: (1) for obtaining the sequences of the barcoded library, and (2) for obtaining the transcriptomic sequences of Open-ST library.</p> <p>We have developed computational tools for processing each of these sequencing rounds. By processing (1), you will get a database of barcodes and their spatial locations. This will used during the automated processing of (2), such that the transcriptome is mapped back to space.</p>"},{"location":"computational/preprocessing_sequencing/#processing-the-sequencing-of-barcoded-library","title":"Processing the sequencing of barcoded library","text":"<p>We have designed a simple computational workflow that allows to transform the <code>bcl</code> or <code>fastq</code> files from the sequencing of the barcoded library into table-like files (<code>csv</code>, or <code>tsv</code>) that contain the following structure:</p> cell_bc x_pos y_pos CGCGAGGGGAAAATGGGGACTAGCG 6343 1016 GGTCCCGTCCAAGAAGTAAATCGAA 9272 1016 ... ... ... <p>Where <code>cell_bc</code> is the 32 nucleotide-long spatial barcode, and <code>x_pos</code>/<code>y_pos</code> are the 2d spatial coordinates of a specific tile in the capture area (see below). Before diving into the code, let's clarify some of the terms that are specific to using Illumina flow cells as capture areas. We quote from  Illumina's documentation</p>"},{"location":"computational/preprocessing_sequencing/#flow-cell-related-terms","title":"Flow cell-related terms","text":"<p>Info</p> <p>Tiles: \"small imaging areas on the flow cell defined as the field of view by the  camera. The total number of tiles depends on the number of lanes, swaths, and surfaces that are imaged on  the flow cell, and how the cameras work together to collect the images.\"</p> <p>Info</p> <p>Lane: \"a physical channel with dedicated input and output ports.\"</p> <p>Info</p> <p>Top/bottom: \"the flow cell is imaged on two surfaces, the top and bottom. The top surface of 1 tile is imaged, then the bottom surface of the same tile is imaged before moving to the next tile.\"</p> <p>Info</p> <p>Swath: \"a column of tiles in a lane.\"</p>"},{"location":"computational/preprocessing_sequencing/#computing-barcodes-and-spatial-coordinates-of-all-tiles","title":"Computing barcodes and spatial coordinates of all tiles","text":"<p>The <code>x_pos</code> and <code>y_pos</code> coordinates from the table above are given for each tile, separately. This information is encoded in the <code>bcl</code> and <code>fastq</code> files. To obtain per-tile barcodes and coordinates, run the following code: </p> <pre><code>openst barcode_preprocessing \\\n    --in-fastq &lt;fastq_of_tile&gt; \\\n    --out-path &lt;out_path&gt; \\\n    --out-suffix &lt;out_suffix&gt; \\\n    --out-prefix &lt;out_prefix&gt; \\\n    --crop-seq &lt;len_int&gt; \\\n    --rev-comp \\\n    --single-tile\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;fastq_of_tile&gt;</code> is the full path to the <code>fastq</code> file of a specific tile; <code>&lt;out_path&gt;</code> is the folder where the table-like files will be written; <code>&lt;out_suffix&gt;</code> and <code>&lt;out_prefix&gt;</code> are suffixes and prefixes that are added to the tile file names; <code>&lt;len_int&gt;</code> from the <code>--crop-seq</code> argument is a string in the Python slice format (e.g., 2:32 will take nucleotides 2<sup>nd</sup> until 32th of the sequence in the <code>fastq</code> file); <code>--rev-comp</code> is provided whether the barcode sequences must be written into the <code>csv</code> as their reverse-complementary; <code>--single-tile</code> argument is provided when the <code>fastq</code> file only contains data for a single tile (our recommendation).</p> <p>The code above will generate a file in <code>&lt;out_path</code> per tile. Only a single fastq file can be provided at a time via <code>--in-fastq</code>. To process this in parallel, you can run the following snippets (in Linux, assuming you start from the <code>fastq</code> files). We assume that you have a file <code>lanes_and_tiles.txt</code>, that contains the tile identifiers that you want to process; you can generate this file with:</p> <pre><code>cat RunInfo.xml | grep \"&lt;Tile&gt;\" | sed 's/ *&lt;Tile&gt;//' | sed 's/&lt;\\/Tile&gt;//' | sed 's/^[ \\t]*//;s/[ \\t]*$//' &gt; lanes_and_tiles.txt\n</code></pre> <p>where <code>RunInfo.xml</code> is a file contained in the basecalls directory. We don't endorse parsing xml like this, but this code snippet works \ud83d\ude48. Then, you can process various <code>fastq</code> files in the basecalls directory as follows:</p> <pre><code>cat lanes_and_tiles.txt | xargs xargs -n 1 -P &lt;parallel_processes&gt; -I {} \\\n    sh -c 'openst barcode_preprocessing \\\n                --in-fastq &lt;fastq_dir&gt;/{}/Undetermined_S0_R1_001.fastq.gz \\\n                --in-fastq &lt;fastq_of_tile&gt; \\\n                --out-path &lt;out_path&gt; \\\n                --out-suffix .txt \\\n                --out-prefix &lt;out_prefix&gt;\"{}\" \\\n                --crop-seq &lt;len_int&gt; \\\n                --rev-comp \\\n                --single-tile'\n</code></pre> <p>Make sure to replace the placeholders (<code>&lt;...&gt;</code>). For instance, <code>&lt;parallel_processes&gt;</code> is the number of parallel processes that will be spawned (recommended: less than the number of cores in your machine); <code>&lt;fastq_dir&gt;</code> is the subdirectory of the basecalls directory where <code>fastq</code> files are contained;  <code>&lt;out_prefix&gt;</code> is the prefix added to the file names (e.g., fc_1 as an internal unique identifier for a flow cell, so you can keep track when having more than one flow cell).</p> <p>Otherwise, if you start from <code>bcl</code> files (raw basecalls), you can run demultiplexing and conversion to <code>fastq</code> simultaneously to generating the barcode spatial coordinate file:</p> <pre><code>cat lanes_and_tiles.txt | xargs xargs -n 1 -P &lt;parallel_processes&gt; -I {} \\\n    sh -c 'bcl2fastq -R &lt;bcl_in&gt; --no-lane-splitting \\\n                -o &lt;bcl_out&gt;/\"{}\" --tiles s_\"{}\"; \\\n\n            openst barcode_preprocessing \\\n                --in-fastq &lt;bcl_out&gt;/{}/Undetermined_S0_R1_001.fastq.gz \\\n                --in-fastq &lt;fastq_of_tile&gt; \\\n                --out-path &lt;out_path&gt; \\\n                --out-suffix .txt \\\n                --out-prefix &lt;out_prefix&gt;\"{}\" \\\n                --crop-seq &lt;len_int&gt; \\\n                --rev-comp \\\n                --single-tile'\n</code></pre> <p>Again, make sure to replace the placeholders (<code>&lt;...&gt;</code>). Now, <code>&lt;bcl_in&gt;</code> and <code>&lt;bcl_out&gt;</code> are the directories where the basecall files are contained and where the converted output <code>fastq</code> files will be saved; The rest of arguments have the same meaning as above.</p>"},{"location":"computational/preprocessing_sequencing/#processing-of-the-open-st-library","title":"Processing of the Open-ST library","text":"<p>The transformation of raw sequencing data into spatially-mapped expression matrices was carried out utilizing  spacemake (see also in GitHub),  an automated pipeline designed for the preprocessing, alignment, and quantification of single-cell and spatial transcriptomics data.</p> <p>We refer to the official documentation for a complete tutorial on how to install and run spacemake. In summary, the user needs to specify a configuration file (by default, we included run modes that are compatible with Open-ST), and a project configuration, containing the locations to the <code>fastq</code> files, to the spatial barcode coordinate files (generated in the previous step), and other metadata. Then, spacemake automatically processes these data into h5ad files, which basically contain a matrix of barcodes (rows) and genes (columns), with associated metadata and spatial coordinates. </p> <p>As well, several HTML reports are generated by spacemake, such that the user can quickly and visually assess the quality of samples prior to any downstream processing and analysis.</p>"},{"location":"computational/preprocessing_sequencing/#global-spatial-coordinates-tile-stitching","title":"Global spatial coordinates: tile stitching","text":"<p>The <code>x_pos</code> and <code>y_pos</code> coordinates from the table above are given relative to each individual tile, not absolute to the  whole extension of the flow cell - which consists of many tiles arranged in lanes and swaths, see above.  This manner, we provide code in <code>openst</code> and <code>spacemake</code> that allows to compute the global coordinates in the  case of having a sample whose placement has cover more than one tile during the Open-ST library preparation. </p> <p>When specifying a <code>run_mode</code> without meshing and with a <code>puck_collection</code> (see spacemake documentation, under the section Configure run_modes), spacemake will automatically generate a single file out of  all individual (per-tile) <code>h5ad</code> files, with the suffix <code>_puck_collection</code>. This file must be used for all subsequent steps of this tutorial, not the individual <code>h5ad</code> files.</p> <p>Otherwise, if these <code>puck_collection</code> files were not automatically generated, we provide code within the <code>openst</code> package with that same functionality. This must be ran one sample at a time, and requires two types of input file: (1) all the <code>h5ad</code> files generated for a single sample (can be specified implicitly, via a wildcard in Linux, or explicitly as a list separated by spaces); and (2) a coordinate system file, that specifies that is the relative offset, in units equivalent to <code>x_pos</code> and <code>y_pos</code>, of the tiles respect to their column and swath. These coordinate system files have a standardized format, and are provided in the [spacemake] and [openst] repos for the Illumina\u00ae NovaSeq 6000 S4 flow cell. If you have used other flow cell, you might need to generate these files following the same convention (feel free to open an issue in our [repo], and we can generate it for you).</p> <p>To manually create 'puck_collection' files, you can run the following in a terminal:</p> <pre><code>openst spatial_stitch \\\n    --tiles &lt;space_separated_list_or_wildcards_to_h5ad&gt; \\\n    --tile-coordinates &lt;path_to_coordinate_system&gt; \\\n    --output &lt;output_puck_collection_h5ad&gt;\n</code></pre> <p>This program has additional arguments that are explained when running <code>openst spatial_stitch --help</code>. Make sure to replace the placeholders (<code>&lt;...&gt;</code>); for example, <code>&lt;space_separated_list_or_wildcards_to_h5ad&gt;</code> is a space-separated list or a implicit (wildcards) path to all h5ad of tiles for a single sample, from spacemake (at the automatically generated <code>dge</code> folder). The <code>&lt;path_to_coordinate_system&gt;</code> is a path to the <code>csv</code> file containing the relative offsets of tiles; and, <code>&lt;output_puck_collection_h5ad&gt;</code> is the name (full or relative path) of the file that will be generated.</p>"},{"location":"computational/preprocessing_sequencing/#expected-output","title":"Expected output","text":"<p>After running all the steps of this section, you will end up with two types of file: (1) the spatial coordinates of flow cell tiles (you will only need to generate this once per flow cell); and (2) one <code>h5ad</code> file per sample, containing the gene expression and spatial coordinates of each barcoded spot. In the following sections, we will use the file (2) and the  previously preprocessed images</p>"},{"location":"computational/threed_reconstruction/","title":"3D reconstruction from serial sections of spatial transcriptomics and H&amp;E images","text":"<p>In this section, we will guide you through the process of creating a 3D reconstruction from serial sections of spatial transcriptomics (ST) and H&amp;E images using the Spatial Transcriptomics ImgLib2/Imaging Project (STIM, v0.2.0). This reconstruction allows you to gain a comprehensive understanding of your biological samples in three dimensions.</p>"},{"location":"computational/threed_reconstruction/#creation-of-csv-files","title":"Creation of csv files","text":"<p>Use the provided script</p> <pre><code>openst to_3d_registration --args --metadata=&lt;where_to_write_metadata&gt;\n</code></pre>"},{"location":"computational/threed_reconstruction/#conversion-to-n5-format","title":"Conversion to n5 format","text":"<p>Convert the coordinate and gene expression information of these datasets into the n5 format, which is optimized for efficient image processing, using the st-resave function. <pre><code>STIMBINS=\"/home/dleonpe/data/bin\"\nSTIMINFILES=\"/data/rajewsky/home/dleonpe/projects/openst_paper/data/2_downstream/fc_sts_63/aligned_sections/1_input\"\nSTIMOUTFILES=\"/data/rajewsky/home/dleonpe/projects/openst_paper/data/2_downstream/fc_sts_63/aligned_sections/2_stim_dataset\"\nFNAME=\"stitched_spots_merged_aligned_10px_GAN_segmented.h5ad.\"\n\n$STIMBINS/st-resave \\\n    -i \"$STIMINFILES/fc_sts_63_2_${FNAME}locations.csv,$STIMINFILES/fc_sts_63_2_${FNAME}genes.csv,fc_sts_63_02\" \\\n    -i \"$STIMINFILES/fc_sts_63_3_${FNAME}locations.csv,$STIMINFILES/fc_sts_63_3_${FNAME}genes.csv,fc_sts_63_03\" \\\n    -o \"$STIMOUTFILES/fc_sts_63.n5\" \\\n    --normalize\n</code></pre></p>"},{"location":"computational/threed_reconstruction/#pairwise-alignment","title":"Pairwise alignment","text":"<p>Utilize the st-align-pairs function to perform pairwise alignment of three sections below and above each section (r=3). This function creates image channels of gene expression for prespecified genes, aggregated per cell as a Gauss rendering around centroids, parametrized with a smoothness factor.</p> <pre><code>STIMBINS=\"/home/dleonpe/data/bin\"\nSTIMOUTFILES=\"/data/rajewsky/home/dleonpe/projects/openst_paper/data/2_downstream/fc_sts_63/aligned_sections/2_stim_dataset\"\n\n# 2. Run pairwise alignment\n$STIMBINS/st-align-pairs \\\n     -i \"$STIMOUTFILES/fc_sts_63.n5\" \\\n     --scale 0.03 \\\n     -r 3 \\\n     --hidePairwiseRendering \\\n     --overwrite \\\n     -sf 4.0 \\\n     --minNumInliers 15 \\\n     --numGenes 0 \\\n     -g 'KRT6A,KRT6B,S100A2,LYZ,CD74,IGKC,IGHG1,IGHA1,JCHAIN,CD74,AMTN'\n     #--numGenes 20 \\\n</code></pre>"},{"location":"computational/threed_reconstruction/#feature-filtering-and-global-alignment","title":"Feature Filtering and Global Alignment","text":"<p>Filter the resulting set of feature matches between pairs of sections using an affine model. Configure the st-align-pairs function with appropriate parameters, such as --minNumInliers 15, --scale 0.03, and -sf 4.0 (smoothness factor). <pre><code>STIMBINS=\"/home/dleonpe/data/bin\"\nSTIMOUTFILES=\"/data/rajewsky/home/dleonpe/projects/openst_paper/data/2_downstream/fc_sts_63/aligned_sections/2_stim_dataset\"\n\n$STIMBINS/st-align-global \\\n     -i \"$STIMOUTFILES/fc_sts_63.n5\" \\\n     --skipICP \\\n     -g 'KRT6A,KRT6B,S100A2,LYZ,CD74,IGHG1,IGHA1,JCHAIN,CD74,AMTN'\n</code></pre></p>"},{"location":"computational/threed_reconstruction/#conversion-to-h5ad-format","title":"Conversion to h5ad Format","text":"<p>Convert the n5 container back to the h5ad format for subsequent downstream analyses. This will also transfer the transformation models from the ST alignment onto the preprocessed and background-removed H&amp;E images. This script will output the aligned spatial coordinates and an image volume that can be used for subsequent 3D visualization, of spatial transcriptomics and H&amp;E staining in a common coordinate system. <pre><code>openst from_3d_registration --args --metadata=&lt;where_to_write_metadata&gt;\n</code></pre></p> <p>You can quickly generate a HTML report to visualize the alignment quality. This will provide, for instance, a volumetric rendering on your browser using the channels (genes) selected for registration. This will also visualize the sections individually, to assess the deformations per section after registration, as well as the deformation fields.</p> <pre><code>openst report --metadata=&lt;where_to_write_metadata&gt; --output=&lt;path_to_html_file&gt;\n</code></pre> <p>With these steps completed, you will have successfully reconstructed a 3D representation of your biological samples, integrating spatial transcriptomics data and H&amp;E images. This 3D reconstruction provides valuable insights into the spatial distribution of gene expression within your samples and enhances your understanding of complex biological structures.</p>"},{"location":"computational/threed_reconstruction/#3d-visualization-with-paraview","title":"3D visualization with ParaView","text":"<p>(explain)</p>"},{"location":"examples/getting_started/","title":"Examples","text":"<p>Here you will find datasets generated in the Rajewsky lab @ MDC Berlin leveraging the Open-ST workflow (experimental and computational). </p> <p>We will add all (clean) notebooks from the preprint soon!</p>"},{"location":"examples/getting_started/#datasets","title":"Datasets","text":"<p>We provide raw data, instructions on how to reproduce the preprocessing pipeline, the corresponding preprocessed data (for comparison), and notebooks for some exploratory visualization and downstream analysis. You can find human and mouse datasets.</p> <ul> <li> Adult mouse hippocampus</li> </ul>"},{"location":"examples/adult_mouse/generate_expression_matrix/","title":"Generating a cell-by-gene matrix","text":"<p>After pairwise alignment, the same coordinate system is shared between the spatial barcodes and the staining images. </p> <p>However, analysis (e.g., clustering, pseudotime, DGE...) is performed on single cells, not on individual capture areas  (0.5 \u03bcm in the current version of the protocol).</p> <p>Here we show how to aggregate the barcoded spots-by-gene matrix into a cell-by-genes matrix, where cells are defined from the segmentation mask.</p>"},{"location":"examples/adult_mouse/generate_expression_matrix/#segmentation-of-staining-image","title":"Segmentation of staining image","text":"<p>To create such a spatial cell-by-gene (\\(M\\times G\\)) expression matrix, you will first need a segmentation mask.</p> <p>We efficiently segment cells (or nuclei) from staining images using cellpose. For the H&amp;E-stained tissue provided in this example, we used our fine-tuned model. Make sure to download it and save it into a new <code>models</code> folder that you need to create under the <code>openst_e13_demo</code> main folder.</p> <p>You can run the segmentation on the previously created <code>openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad</code> file, which contains the spatial transcriptome coordinates and staining image after coarse+fine pairwise alignment.</p> <pre><code>openst segment \\\n    --adata alignment/openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad \\\n    --image-in 'uns/spatial_pairwise_aligned/staining_image_transformed' \\\n    --output-mask 'uns/spatial_pairwise_aligned/mask_transformed_0px' \\\n    --model models/HE_cellpose_rajewsky \\\n    --chunked \\\n    --gpu \\\n    --num-workers 8\n</code></pre> <p>After running this command, the segmentation mask is created and stored in the same <code>--adata</code> file, under the dataset <code>uns/spatial_pairwise_aligned/mask_transformed_0px</code>.</p>"},{"location":"examples/adult_mouse/generate_expression_matrix/#assigning-transcripts-to-segmented-cells","title":"Assigning transcripts to segmented cells","text":"<p>Now, we aggregate the initial barcoded spots-by-gene matrix into a cells-by-genes matrix, by leveraging the segmentation mask.</p> <p>Note</p> <p>In this dataset, we did not specify <code>--dilate-px</code>. Since this model segments nuclei from H&amp;E, we are referring to nuclei when we talk about cells. We use this terminology for consistency with the rest of the documentation.</p> <p>This step allows you to aggregate capture spots by segmented cells:</p> <pre><code>openst transcript_assign \\\n    --adata alignment/openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad \\\n    --spatial-key spatial_pairwise_aligned_fine \\\n    --mask-in-adata \\\n    --mask 'uns/spatial_pairwise_aligned/mask_transformed_0px' \\\n    --output alignment/openst_demo_e13_mouse_by_cell.h5ad\n</code></pre>"},{"location":"examples/adult_mouse/generate_expression_matrix/#expected-output","title":"Expected output","text":"<p>That's it! After running the steps above, you will have that single <code>alignment/openst_demo_e13_mouse_by_cell.h5ad</code> file, which contains the transcriptomic information per segmented cell (nucleus). You can also find here, our output to the one you just generated. </p> <p>Warning</p> <p>Do not expect the files to be exactly the same, as there are several steps on the pipeline that are not deterministic (e.g., alignment, segmentation).</p> <p>Now, the following sections provide some examples of exploratory data analysis that can be performed with this type of data.</p>"},{"location":"examples/adult_mouse/introduction/","title":"Introduction","text":"<p>In our preprint, we used an adult mouse hippocampus sample to carefully benchmark the precision, sensitivity, and spatial resolution of RNA capture due to the high availability of published gene expression data (RNA-seq, in-situ hybridization, ST, etc.) and the possibility to maintain RNA quality by controlling sample handling and timing. </p> <p>In the following sections, we explore how to reproduce the preprocessing steps for this data, and provide an example notebook for exploratory data analysis of the data using standard single cell tools.</p>"},{"location":"examples/adult_mouse/pairwise_alignment/","title":"Align image to transcriptome","text":"<p>In the previous step, the transcriptomic reads were processed and mapped in tissue space with <code>spacemake</code>. Now, we perform a pairwise alignment between the imaging and spatial transcriptomics modality, such that we can later aggregate transcripts into individual cells delimited by the segmentation mask.</p> <p>We will illustrate how to do this in a semiautomatic manner: that is, running the coarse alignment in an automatic fashion, and the fine alignment (to fiducial marks) via GUI, in a manual manner. Although we provide models for fiducial feature detection, the accuracy might be affected by the type of microscope, imaging strategy, tissue type and width... Thus, manual fine alignment is a good option. Thanks to the GUI specifically designed for this task, the necessary amount of time invested is reasonable (~5 minutes per sample consisting of 12 tiles).</p>"},{"location":"examples/adult_mouse/pairwise_alignment/#coarse-alignment","title":"Coarse alignment","text":"<p>We assume that you have the single <code>h5ad</code> file that contains all the tiles for the experiment (you got it automatically from <code>spacemake</code>, or you followed the stitching instructions).</p> <p>Now, make sure of two things: 1. You have an environment where the <code>openst</code> package is installed (we recommend doing this in an environment different to the one used for <code>spacemake</code>). 1. You are in the <code>/home/user/openst_e13_demo</code> folder (or similar, depending on your system, username...)</p> <pre><code>openst pairwise_aligner \\\n    --image-in alignment/e13_brain_staining.tif \\\n    --h5-in projects/openst_demo/processed_data/openst_demo_e13_mouse/illumina/complete_data/dge/dge.all.polyA_adapter_trimmed.mm_included.spatial_beads_puck_collection.h5ad \\\n    --h5-out alignment/openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad \\\n    --save-image-in-h5 \\\n    --only-coarse \\\n    --device cuda\n</code></pre> <p>This will create the file <code>alignment/openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad</code>, that hopefully contains a proper coarse alignment of the two modalities (at low resolution).</p>"},{"location":"examples/adult_mouse/pairwise_alignment/#fine-alignment-manual","title":"Fine alignment (manual)","text":"<p>You will now visually asses it and refine the previous coarse alignment using the provided GUI tool.  From the terminal, run:</p> <pre><code>openst manual_pairwise_aligner_gui\n</code></pre> <p>Then, follow these instructions on the GUI, by pressing the buttons:</p> <ol> <li>Click on Load h5ad and browse to the location where the <code>openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad</code> file is located. Select it and click Open. </li> <li>Go to Data properties, then click under Image data, and select from the tree <code>uns&gt;spatial_pairwise_aligned&gt;staining_image_transformed</code>. Click Ok.</li> <li>Click under Spatial coordinates, and select from the tree <code>obsm/spatial_pairwise_aligned_coarse</code>. Click Ok.</li> <li>Go to rendering settings, and keep in mind the Threshold counts parameter.</li> <li>Now select the all_tiles_coarse option from the Layer selector, and click on Render. You will see the staining image on the upper left,    the transcriptomic image on the top right, and the merge on the bottom left. These two modalities should roughly match. If not, you would need to    run the coarse alignment in manual mode, too.</li> <li>Once you've checked that the coarse alignment is fine, start selecting the layer 0, and click Render.</li> <li>Now, you need to select the pairs of corresponding fiducial markers on both modalities (top left and top right) by double clicking on the left image, first, and on the right image, second. You can drag the points to new locations, zoom into the images with the mouse wheel, pan the image by holding the mouse right cursor and moving, and remove the points by pressing backspace on your keyboard.</li> <li>You need to select at least 2 pairs of points per layer. Don't forget to click on Render after you select a new layer (e.g., 1, 2, 3...) so it displays. Also, you can preview how the alignment will look like after transformation by pressing Preview alignment. This will update the merge view (bottom left). You can change the opacity of the merge images under Rendering settings, by adjusting the Image A/B opacity sliders. Also, if you don't see a lot of signal in the transcriptomic pseudoimage, try decreasing the Threshold counts and Pseudoimage size values. Per tile (layer), adjust the keypoints until you get a good alignment as many times as necessary.</li> <li>Once you've finished, go under Keypoint properties and click on Save keypoints. Go to the <code>alignment</code> folder under <code>openst_e13_demo</code>, and save the file as <code>openst_e13_demo_fine_keypoints</code>.</li> </ol> <p>Great! You have just created a file with the corresponding points between the respective coordinate systems of the spatial trancriptome and image modalities. </p>"},{"location":"examples/adult_mouse/pairwise_alignment/#apply-keypoint-transformation-to-coarse-alignment","title":"Apply keypoint transformation to coarse alignment","text":"<p>Now, you need to run a program that takes the <code>h5ad</code> file with the coarse alignment, and the keypoints file, to perform the fine alignment:</p> <pre><code>openst manual_pairwise_aligner \\\n    --keypoints-json alignment/openst_e13_demo_fine_keypoints.json \\\n    --h5-in alignment/openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad \\\n    --fine\n</code></pre> <p>After this, no file will be created nor removed; the coordinates of the fine alignment will be added to the existing <code>openst_demo_e13_mouse_spatial_beads_puck_collection_aligned.h5ad</code> file.</p> <p>That's it! Now you're ready to go to the next step.</p>"},{"location":"examples/adult_mouse/preprocessing_imaging/","title":"Preprocessing of imaging data","text":"<p>For this dataset, we provide the stitched tile-scan image. This single image was  generated from multiple, independently imaged tiles, by leveraging <code>openst image_stitch</code>. So,  you don't need to use this command, since we already provide the stitched image. Anyway, let us know if you want access to this tile images, in case you want to try.</p> <p>As well, the imaging from this dataset did not require any further postprocessing prior to segmentation, as visual inspection of the images did not reveal any strong illumination or focus biases. </p> <p>(provide a screenshot of the image here)</p> <p>Therefore, feel free to download the data from the link above, and continue to the next section. Then, browse back to the <code>openst_e13_demo</code> folder, create a folder <code>alignment</code>, and save the <code>e13_brain_staining.tif</code> file inside the <code>alignment</code> folder. You will have the following file structure:</p> <pre><code>/home/user\n|-- openst_e13_demo\n|   |-- data\n|   |   `-- fastq\n|   |-- spacemake\n|   |   `-- ...\n|   |-- bins\n|   `-- alignment\n|       `-- e13_brain_staining.tif\n</code></pre>"},{"location":"examples/adult_mouse/preprocessing_sequencing/","title":"Preprocessing of sequencing","text":"<p>After sequencing, we proceed with the preprocessing of the data, to go from raw reads to transcriptomic information mapped to the mouse genome, in space.</p>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#demultiplexing","title":"Demultiplexing","text":"<p>We got basecall files in <code>bcl</code> format from our sequencing facility.</p> <p>We used <code>bcl2fastq</code> for demultiplexing, using this sample sheet. We used the conda environment where we installed <code>spacemake</code> (see instructions on how to install spacemake), and ran the following commands:</p> <pre><code>(base) user@computer:~$ bcl2fastq \\\n    --no-lane-splitting \\\n    --runfolder-dir /openst/data/0_basecalls/230616_VH01346_22_AAC2LVVHV \\\n    -o /openst/data/1_spacemake_mouse/demultiplexed_data \\\n    --sample-sheet /openst/data/0_sample_sheets/230616_NR_FC_ST_72_76_AT_01.csv\n</code></pre> <p>We obtained <code>fastq</code> files that will be used for the rest of the pipeline, that you can download from here. Once you download these files, you can move them anywhere in your filesystem. We assume that you have opened a terminal, and you have browsed to your home directory. From there, create a folder <code>openst_e13_demo</code>; browse inside, and create another folder <code>data</code>. Then, copy the folder with the <code>fastq</code> files in here. You should have a structure like:</p> <pre><code>/home/user\n|-- openst_e13_demo\n|   `-- data\n|       `-- fastq\n</code></pre>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#transcriptomic-spatial-mapping-with-spacemake","title":"Transcriptomic &amp; spatial mapping with <code>spacemake</code>","text":"<p>First of all, intialize the conda environment for <code>spacemake</code> <pre><code>(base) user@computer:~$ conda activate spacemake\n(spacemake) user@computer:~$\n</code></pre></p>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#initialization","title":"Initialization","text":"<p>Create two folders inside your <code>openst_e13_demo</code> folder, called <code>spacemake</code> and <code>bins</code>, so you will have:</p> <pre><code>/home/user\n|-- openst_e13_demo\n|   |-- data\n|   |   `-- fastq\n|   |-- spacemake\n|   `-- bins\n</code></pre> <p>Download the DropSeq tools, decompress it, and put it inside the <code>bins</code> subdirectory.</p> <p>Then, following the spacemake Quick start guide, browse to the <code>spacemake</code> directory you just created in the <code>openst_e13_demo</code> folder, and run the initialization:</p> <pre><code>(spacemake) user@computer:~$ cd /home/user/openst_e13_demo/spacemake\n(spacemake) user@computer:/home/user/openst_e13_demo/spacemake$ spacemake init\n    --dropseq_tools /home/user/bins/Drop-seq_tools-2.5.1\n</code></pre>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#configuring-spacemake","title":"Configuring spacemake","text":"<p>As <code>spacemake</code> comes with no default value for species, before anything can be done, a new species has to be added. In this case, we add mouse; you will need to download the correct <code>fa</code> and <code>gtf</code> files. For instance, you can download the mouse genome from gencode, as well as the annotation.</p> <p>Then, you need to run the following commands (remember, in the same <code>spacemake</code> folder as before, with the <code>spacemake</code> conda environment; we are going to omit <code>(spacemake) user@computer:/home/user/openst_e13_demo/spacemake$</code> for brevity).</p> <pre><code>spacemake config add_species \\\n   --name mouse \\\n   --reference genome \\\n   --sequence &lt;path_to_genome.fa&gt; \\\n   --annotation &lt;path_to_genome_annotation.gtf&gt;\n\nspacemake config add_species \\\n   --name mouse \\\n   --reference rRNA \\\n   --sequence &lt;path_to_rRNA_sequences.fa&gt;\n\nspacemake config add_species \\\n   --name mouse \\\n   --reference phiX \\\n   --sequence &lt;path_to_phiX_genome.fa&gt;\n</code></pre>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#adding-sample","title":"Adding sample","text":"<p>Now you need to add the sample data and metadata to <code>spacemake</code>. For this, you will also need the puck (tile) barcode files, which can be generated with the <code>openst</code> package.</p> <p>For simplicity, we provide in this link the tile barcode files that are related to this sample, as well as the coordinate system for the Illumina flow cell that was used to generate the capture area of this experiment.</p> <p>When downloading the tile barcode files, create a folder under <code>openst_e13_demo/data</code> called <code>tiles</code>. Move the files of the tile barcode files into this folder. Also, move the coordinate file to the <code>puck_data</code> folder in the <code>spacemake</code> directory.</p> <p>Remember! You need to be in the <code>/home/user/openst_e13_demo/spacemake</code> directory (or similar, depending on what you created); then run the following command:</p> <pre><code>spacemake projects add_sample \\\n    --project_id openst_demo \\\n    --sample_id openst_demo_e13_mouse \\\n    --R1 &lt;path_to_R1.fastq.gz&gt; \\\n    --R2 &lt;path_to_R2.fastq.gz&gt; \\\n    --species mouse \\\n    --puck openst \\\n    --run_mode openst \\\n    --barcode_flavor openst \\\n    --puck_barcode_file tiles/*.txt.gz \\\n    --map_strategy \"bowtie2:phiX-&gt;bowtie2:rRNA-&gt;STAR:genome:final\"\n</code></pre> <p>You can specify the coordinate system by modifying the <code>openst</code> run mode in the <code>config.yaml</code> file that is created after you run the <code>spacemake init</code> command (see above). Modify the following lines from this:</p> <pre><code>openst:\n    coordinate_system: puck_id/openst_coordinates.csv\n    spot_diameter_um: 0.6\n    width_um: 1200\n</code></pre> <p>into this:</p> <pre><code>openst:\n    coordinate_system: puck_id/openst_demo_e13_brain_coordinate_system.csv\n    spot_diameter_um: 0.6\n    width_um: 1200\n</code></pre>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#running-spacemake","title":"Running <code>spacemake</code>","text":"<p>That's all you need to configure! Now, you can run spacemake with the following:</p> <pre><code>spacemake run --cores 32\n</code></pre> <p>You can modify the number of <code>--cores</code> depending on your local machine; also, you can specify additional arguments to <code>spacemake run</code> - refer to the official documentation.</p>"},{"location":"examples/adult_mouse/preprocessing_sequencing/#expected-output","title":"Expected output","text":"<p>Once <code>spacemake</code> finishes, you will see that several folders and files have been created under <code>projects</code> (inside the <code>spacemake</code> directory). For example, you can check the QC reports in your web browser by opening the file at <code>projects/openst_demo/processed_data/openst_demo_e13_mouse/illumina/complete_data/qc_sheets/qc_sheet_openst_demo_e13_mouse_fc_1_puck_collection.html</code>, giving you a first impression of what's the quality of spatial mapping, amount of transcripts and genes per barcoded spot, and others.</p> <p>Importantly, you will find files in the directory <code>projects/openst_demo/processed_data/openst_demo_e13_mouse/illumina/complete_data/dge</code> with the name <code>dge.all.polyA_adapter_trimmed.mm_included.spatial_beads_*.h5ad</code> (where <code>*</code> is a wildcard). These files, and not the ones containing  the words <code>mesh</code>, <code>hexagon</code> or <code>circle</code> are the ones that will be used later to perform the pairwise alignment with imaging data, and to later reconstruct the cell-by-gene matrix.</p> <p>If you specified options for meshing in the <code>run_mode</code>, there will be a file containing keywords <code>puck_collection</code> and <code>mesh</code>, <code>hexagon</code> or <code>circle</code>. This contains approximate cell-by-gene information, as the transcripts are aggregated by a regular lattice and not by the true spatial arrangement of cells. This might be already enough for some analyses. </p> <p>Anyway... keep going with the tutorial if you want to unleash the full potential of Open-ST \ud83d\ude09.</p>"},{"location":"experimental/capture_area_generation/","title":"Capture area generation","text":"<p>The following section details the generation of capture areas for the Open-ST protocol. </p> <p>By sequencing oligos, which comprise unique 32-nucleotide barcodes, appropriate adapters, and a poly-dT, we register the barcode sequences and their associated coordinates on the flow cell.</p> <p>For instance, you can get ~360 capture areas sized 3x4 mm from a single Illumina\u00ae NovaSeq 6000 S4 flow cell.</p>"},{"location":"experimental/capture_area_generation/#sequencing-of-barcoded-library","title":"Sequencing of barcoded library","text":"<p>When using an Illumina\u00ae NovaSeq 6000 S4 flow cell (35 cycles), sequence the HDMI32-DraI library (see in Oligonucleotides) at a loading concentration of 200 pM. </p> <p>Sequence a single-end 37 cycle read, using Read1-DraI oligo as a custom primer. Use a custom sequencing recipe that stops the run immediately after read 1 prior to on-instrument washes. </p>"},{"location":"experimental/capture_area_generation/#expected-data-output","title":"Expected (data) output","text":"<p>Either when using your own sequencing equipment or relying on a sequencing facility, you will get access to (most likely) already demultiplexed <code>fastq</code> files; otherwise, you can get access to raw basecall files in <code>bcl</code> format.</p> <p>Either of these files shall be used as the input for <code>openst</code> later, to create a database of barcode sequences and their spatial locations.</p>"},{"location":"experimental/capture_area_generation/#enzymatic-processing","title":"Enzymatic processing","text":"<p>Tips</p> <ul> <li>Prepare mixes in excess. ~300 uL per lane is required for the S4 flow cell.</li> <li>If bubbles occur, mark these with pen on the flow cell. Repeat reactions if many bubbles occur and ensure bubbles do not form at the same locations. </li> <li>Use a P1000 pipette and pipette slowly to avoid the formation of bubbles. </li> <li>For removing washes, pipette the liquid out and then blow through air using the P1000 to remove remaining liquid.</li> </ul>"},{"location":"experimental/capture_area_generation/#dra-i-digestion","title":"Dra I digestion","text":"<p>DraI mix</p> Reagent Final concentration Volume (uL) DraI 2U/uL 10 10X CutSmart buffer 1x 10 Ultrapure water 80 <ol> <li>Wash flow cell by flowing through 500 uL ultrapure water using a P1000 pipette.  </li> <li>Add DraI mix and incubate at 37\u00b0C overnight.</li> </ol>"},{"location":"experimental/capture_area_generation/#exonucelase-i-digestion","title":"Exonucelase I digestion","text":"<p>ExoI mix</p> Reagent Final concentration Volume (uL) ExoI 1 U/uL 5 10X ExoI buffer 1x 10 Ultrapure water 85 <ol> <li>Wash flow cell by flowing through 500 uL 80% ethanol, then ultrapure water.</li> <li>Add Exonuclease I mix and incubate for 45 min at 37\u00b0C.</li> <li>Wash flow cell by flowing through 500 uL ultrapure water three times.</li> </ol>"},{"location":"experimental/capture_area_generation/#opening-denaturation-and-washes","title":"Opening, denaturation and washes","text":"<p>Note</p> <p>The NovaSeq6000 S4 flow cell images the top and bottom glass. Thus, keep both and take care not to break them.  </p> <ol> <li>Remove the flow cell from its plastic encasing. </li> <li>Carefully score along the sides of the flow cell using a scalpell. The blade should be in one plane with the flow cell.</li> <li>Once all sides detach, carefully seperate the two flow cell glasses. </li> </ol>"},{"location":"experimental/capture_area_generation/#breaking-the-flow-cells-into-capture-areas","title":"Breaking the flow cells into capture areas","text":"<p>Note</p> <p>Capture areas can be stored dry at -20\u00b0C for extended periods of time. We have generated libraries from prepared capture areas stored for 12 months. </p> <p>We have designed a cutting guide that facilitates the breaking of the flow cell into regular capture areas.  We provide the 3D model of the cutting guide as a printable stl file. If you don't have a 3D printer, you can check for 3D printing services near you - they will help you in this endeavor \ud83e\udd17.</p> <p>Once you have the tool, refer to the video where we explain how to use it:</p> <p> Open-ST: breaking the flow cell into capture areas by @danilexn \u2013  10m \u2013 Learn how to break an Illumina\u00ae NovaSeq 6000 S4 flow cell into capture areas  using our 3D-printable cutting guide.</p>"},{"location":"experimental/getting_started/","title":"Getting started","text":""},{"location":"experimental/getting_started/#materials","title":"Materials","text":"Reagents REAGENT SOURCE IDENTIFIER Dra I enzyme NEB Cat#R0129 Alkaline Phosphatase Calf Intestinal (CIAP) enzyme Promega Cat#M1821 Exonuclease I enzyme NEB Cat#M0293 NaOH solution for molecular biology 10 M in H2O Sigma Cat#72068 UltraPure\u21221M Tris-HCl pH7.5 Invitrogen\u2122 Cat#15567027 Tissue-Tek OCT Sakura Finetek Cat#4583 Methanol (min. 99.8%) Th. Geyer Cat#1437 2-propanol (min 99.9%) Th. Geyer Cat#1197 Mayer\u2019s Haematoxylin Agilent Dako Cat#S3309 Bluing buffer Agilent Dako Cat#CS702 Eosin Y, aqueous Sigma Cat#HT110216 Pepsin from porcine gastric mucosa Sigma Cat#P7000 20x SSC Sigma Cat#S6639-1L Hydrochloric Acid (HCl) 10N AppliChem Cat#187051 BSA Molecular Biology Grade (conc. 20 mg/ml) NEB Cat#B9000S dNTP SET 100mM 4X1mL Life Technologies Cat#R0182 SuperScript IV Reverse Transcriptase Life Technologies Cat#18090010 RiboLock RNase Inhibitor Thermo Scientific Cat#EO0381 Tris-HCl Buffer pH 8.0, 1M Life Technologies Cat#AM9855G Sodium chloride NaCl (5M), RNase-free Invitrogen Cat#AM9760G Roti\u00ae-Stock 20 % SDS ready-to-use, sterile filtered Roth Cat#1057.1 UltraPure 0.5M EDTA, pH 8.0 Life Technologies Cat#15575020 Proteinase K (800 mU/uL) NEB Cat#P8107S DNA Polymerase Large Fragment exo- Klenow Fragment (3'-5' exo-) NEB Cat#M0212 Ampure XP beads Beckman coulter Cat#A63881 Kapa HiFi Hotstart Readymix KK2612 Roche Cat#7958960001 1.5% Agarose gel, PippinHT (300-1500 bp) Biozym HTC1510 Qubit dsDNA HS Assay Kit Invitrogen Cat#Q32854 High sensitivity DNA kit Agilent Cat#5067-4626 HS RNA tapestation Agilent 5067-5579/5580/5581 Blue S'Green qPCR mix Biozym Cat#331416 KAPA LQ Primer + Mastermix (Illumina/ LC480) Roche Cat#7960573001 KAPA Library Quantification DNA Standards (Illumina) Roche Cat#7960387001 NovaSeq 6000 S4 reagent kit v1.5 (35 cycles) Illumina Cat#20044417 Oligonucleotides OLIGO SEQUENCE COMMENT HDMI32-DraI CAAGCAGAAGACGGCATACGAGATTCTTTCCCTACACGACGCTCTTCCGATCTNNVNBVNNVNNVNNVNNVNNVNNVNNVNNNNNTCTTGTGACTACAGCACCCTCGACTCTCGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAAGACTTTCACCAGTCCATGATGTGTAGATCTCGGTGGTCGCCGTATCATT Randomer TCAGACGTGTGCTCTTCCGATCTNNNNNNNNN Read1-DraI ATCATGGACTGGTGAAAGTCTTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCGAGAGTCGAGGGTGCTGTAGTCACAAGA p5_fwd AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCT\u2217T\u2217C *denotes phosphorothioated DNA bases p7_rev_indexing CAAGCAGAAGACGGCATACGAGAT[8-mer index sequence]GTGACTGGAGTTCAGACGTGTGCTCTTCC\u2217G\u2217A *denotes phosphorothioated DNA bases Equipment <ul> <li>Chemical hood (for work with toxic chemicals, such as Trizol or methanol)  </li> <li>Cryostat </li> <li>Heating block (Can also use hybridisation oven for pre-warming pepsin.)</li> <li>Hybridization oven </li> <li>Brightfield imaging system add objective requirements, camera</li> <li>Thermocycler </li> <li>qPCR machine </li> <li>Bluepippin or PippinHT (alternatively, use manual agarose gel setup and DNA extraction)</li> <li>Automated gel electrophoresis machine (eg. Tapestation or BioAnalyzer)</li> <li>Qubit fluorometer   </li> <li>3D printer (If you don't have a 3D printer, you can check for 3D printing services near you) </li> </ul>"},{"location":"experimental/library_preparation/","title":"Library preparation","text":""},{"location":"experimental/library_preparation/#tissue-sectioning","title":"Tissue sectioning","text":"<p>Before starting</p> <p>Before sectioning, place the OCT-mounted fresh frozen tissue in a cryostat for 20 minutes at the selected cutting temperature (adjusted according to tissue). Place the capture areas at room temperature. </p> <p>Before starting</p> <p>Pre-cool 100% methanol at -20\u00b0C for subsequent fixation step. </p> <p>Tip</p> <p>Trim the excess OCT surrounding the tissue to prevent folding of OCT under or over the tissue.  </p> <p>Warning</p> <p>Remove the capture area from the stage, as soon as the transfer occured, to avoid re-freezing of the tissue onto the stage. </p> <ol> <li>Slice the tissue at the selected temperature at 10 \u03bcm thickness.</li> <li>Place the capture area (room temperature) on the tissue section on the cutting stage. The tissue will melt onto the capture area.</li> <li>Store the capture area with tissue-side up in the cryostat until fixation. </li> </ol>"},{"location":"experimental/library_preparation/#fixation","title":"Fixation","text":"<p>Note</p> <p>Transport samples on dry ice until placed in -20\u00b0C methanol. </p> <ol> <li>Fix the tissue by placing the capture area with the tissue section in a tube containing 1 mL of 100% Methanol (pre-cooled to -20\u00b0C). </li> <li>Incubate at -20\u00b0C for 30 min.</li> </ol>"},{"location":"experimental/library_preparation/#hematoxilin-and-eosin-he-staining-and-imaging","title":"Hematoxilin and eosin (H&amp;E) staining and imaging","text":"<p>Buffered Eosin (make fresh)</p> Reagent Volume (\u03bcL) Eosin Y 500 0.45M Tris-Acetate buffer pH 6.0 500 <p>For incubations, add enough volume to cover the capture area completely. For all washes, wash by dipping in a beaker with Ultrapure water (500 mL). </p> <ol> <li>Add isopropanol to the tissues on the capture area and incubate for 1 min, then remove the solution and dry the tissues. </li> <li>Add hematoxylin, and incubate for 5 min.</li> <li>Wash the capture area with Ultrapure water until the hematoxylin dye is completely removed (10-15x). </li> <li>Add bluing buffer, and incubate for 2 min. </li> <li>Wash the capture area with Ultrapure water, dipping 5 times. </li> <li>Add buffered eosin onto tissue section for 1 min.</li> <li>Wash the capture area with Ultrapure water, dipping 10-15x. </li> <li>Let the capture area air-dry at room temperature for 10 min. Dry the tissues completely with no residual water. </li> <li>Put the capture area face-down on a coverslip (#1.5, 24x50mm) and image on brightfield with the 20x objective.</li> </ol> <p>After imaging, place the capture areas with the tissue section face up into a multi-well gasket, such as the 16-Well ProChamber Microarray System (Grace Bio-Labs, Cat#645508). We use 100 \u03bcL reaction volume throughout the protocol whilst using the gasket. </p>"},{"location":"experimental/library_preparation/#permeabilization","title":"Permeabilization","text":"<p>We recommend performing a pilot experiment in which you compare different permeabilization conditions using a qPCR assay. We suggest comparing different pepsin incubation times (for example, 0, 15, 30, 45, and 60 min) at 37\u00b0C.   Follow the library preparation steps until qPCR for cycle number assessment. Earlier amplification corresponds to a higher concentration of starting material, ie. more efficient mRNA capture. If conditions amplify together, chose the shorter time or lower pepsin concentration for permeabilization of your sample.  </p> <ol> <li>Weigh and dissolve the pepsin to have a solution with 7 U/ul pepsin in 2xSSC pH 2.5. </li> <li>Dilute 1:10 with 2xSSC pH 2.5 to get the final concentration of 0.7 U/\u03bcl.</li> <li>Prewarm permeabilization mix at 37\u2103 several minutes before use. </li> <li>Incubate at 37\u00b0C for X min (ex. 15 min - 30 min - 60 min) according to the tissue used.  </li> </ol>"},{"location":"experimental/library_preparation/#reverse-transcription","title":"Reverse transcription","text":"<p>Reverse transcription (RT) buffer </p> Reagent Final concentration Volume (\u03bcl) SSIV 5X rt BUFFER 1x 20 RNase inhibitor (40U/ul) 1U/ul 2.5 Ultrapure water 77.5 Total 100 <p>Reverse transcription mix </p> Reagent Final concentration Volume (\u03bcl) SSIV 5X rt BUFFER 1x 20 0.1M DTT 5mM 5 BSA (20mg/ml) 0.187mg/ml 0.93 10mM dNTP mix 1mM 10 Superscript IV (200U/ul) 6.67 U/uL 3.33 Ribolock(40U/uL) 1U 2.5 Ultrapure water 58.24 Total 100 <ol> <li>Remove the pepsin solution. </li> <li>Wash the capture area carefully with 100 \u03bcl RT Buffer once.</li> <li>Add 100 \u03bcL RT mix per capture area. Incubate overnight at 42\u00b0C. </li> </ol>"},{"location":"experimental/library_preparation/#exo-i-digestion","title":"Exo I digestion","text":"<p>Exonuclease I mix </p> Reagent Final concentration Volume (\u03bcl) 10 x Exo I buffer 1x 10 Exo I 1U/ul 5 Ultrapure water 85 Total 100 <ol> <li>Remove the RT solution. </li> <li>Add 100 \u03bcL Exonuclease I mix per capture area to eliminate DNA that did not hybridize with mRNA.  </li> <li>Incubate 45 min at 37\u2103. </li> </ol>"},{"location":"experimental/library_preparation/#tissue-removal","title":"Tissue removal","text":"<p>Tissue removal mix </p> Reagent Final concentration Volume (\u03bcL) Tris-Cl pH 8.0 100 mM 10 2M NaCl 200 mM 10 20% SDS 2% 10 0.1M EDTA 5 mM 5 Proteinase K ( 800 mU/uL) 16 mU/uL 2 Nuclease -free water 63 Total 100 <ol> <li>Remove the Exonuclease I mix. </li> <li>Add 100 \u03bcl of 1x tissue removal mix per capture area and incubate for 40 minutes at 37\u2103.</li> <li>Wash as follows: <ol> <li>Wash the capture area with ultrapure water three times. </li> <li>Wash the capture area  with 100 \u03bcl of freshly prepared 0.1N NaOH three times* (*each with 5 min incubation at room temperature). </li> <li>Wash the capture area  with 100 \u03bcl of 0.1M Tris (pH7.5) three times. </li> <li>Wash the capture area with 100 \u03bcl of Ultrapure water three times. </li> </ol> </li> </ol> <p>Note</p> <p>Visually confirm that tissue removal is complete after washes have been completed. </p>"},{"location":"experimental/library_preparation/#second-strand-synthesis","title":"Second strand synthesis","text":"<p>Second strand synthesis mix</p> Reagent Final concentration Volume (\u03bcL) NEBuffer-2 1x 10 100 uM randomer 10 uM 10 10 mM dNTPs 1 mM 10 Klenow exo (-) Fragment (5 U/uL) 0.5 U/uL 10 Ultrapure water 60 Total 100 <ol> <li>Add 100 \u03bcL second strand synthesis mix per capture area. Incubate at 37\u00b0C for 2 h. </li> <li>Wash with 100 \u03bcL ultrapure water 3 times. </li> <li>Elute the second strand product by incubating the capture areas in 100 \u03bcl of freshly prepared 0.1 N NaOH twice for 5 min each. Recover the elutions and pool the second strand product together per sample.</li> <li>Mix 200 \u03bcl of second strand product with 28.6 \u03bcl of 1M Tris-HCl pH 7.5. Proceed directly to next step.</li> </ol> <p>Purify the 228.6 \u03bcL elution using AmpureXP beads at a ratio of 1.8 beads to 1x second strand product, following the manufacturer's instructions. Elute the product in 82.5 \u03bcL ultrapure water.  </p>"},{"location":"experimental/library_preparation/#qpcr-for-cycle-number-assessment","title":"qPCR for cycle number assessment","text":"<p>Note</p> <p>Use of a passive reference dye depends on the qPCR cycler used. We usually use the StepOne\u2122 Real-Time PCR System (Applied Biosystems).  </p> <p>Pipette and run a qPCR to determine the appropriate cycle number to amplify your eluted second strands. </p> <p>qPCR mix</p> Reagent Final concentration Volume (\u03bcl) 2x Blue S'Green qPCR mix + ROX 1x 10 10 uM Fw primer 1 uM 2 10 uM Rw primer 1 uM 2 Second strand product 2.5 Ultrapure water 3.5 Total 20 Temperature Time Cycles 95\u00b0C 3 min 1 95\u00b0C 30 sec (40) 60\u00b0C 1 min (40) 72\u00b0C 1 min (40) <p>Derive the PCR cycle number required for the amplification of your sample as follows: </p> <p>Set a threshold at 50% of the peak \u0394Rn. For each sample determine the cycle number at the intersection of the threshold and amplification curve.  Subtract 5 cycles to account fo the qPCR input (3%). This number is your recommended PCR cycle number. We expect a cycling number between 11 and 14. </p>"},{"location":"experimental/library_preparation/#library-construction","title":"Library construction","text":""},{"location":"experimental/library_preparation/#library-amplification-and-purification","title":"Library amplification and purification","text":"<p>Library amplification mix</p> Reagent Final concentration Volume (\u03bcL) 2x KAPA HiFi Hotstart Readymix 1x 100 100 uM WTA1*F primer 1 uM 2 100 uM WTA1*R primer 1 uM 2 Purified 2<sup>nd</sup> strand 80 Ultrapure water 16 Total 200 Temperature Time Cycles 95\u00b0C 3 min 1 95\u00b0C 30 sec (To be determined) 60\u00b0C 1 min (To be determined) 72\u00b0C 1 min (To be determined) 72\u00b0C 2 min 1 4\u00b0C hold <ol> <li>Prepare the library amplification mix per sample. </li> <li>Split each sample mix into four PCR tubes, each with 50 uL volume. </li> <li>Run the PCR with the cycle number determined previously (3.9). </li> <li>Pool the 200 \u03bcL PCR product per sample and purify using AmpureXP beads at a 1:1 ratio of beads PCR product, following the manufacturer's instructions.</li> <li>Elute the PCR product in 20 \u03bcL ultrapure water. </li> </ol> <p></p> Example BioAnalyzer profile before size selection"},{"location":"experimental/library_preparation/#size-selection","title":"Size selection","text":"<p>Perform size selection of your sample to obtain fragments 350 - 1100 bp. Use the Bluepippin or PippinHT 1.5% agarose gel and follow the manufacturer's instructions.  Measure the concentration of your size-selected product using the Qubit dsDNA quanitification kit. </p> <p></p> Example BioAnalyzer profile after size selection"},{"location":"experimental/sequencing_of_openst_library/","title":"Sequencing of Open-ST library","text":""},{"location":"experimental/sequencing_of_openst_library/#quantification","title":"Quantification","text":"<p>We recommend quantifying your libraries for sequencing using the KAPA Library Quantification Kit.</p>"},{"location":"experimental/sequencing_of_openst_library/#loading-and-sequencing","title":"Loading and sequencing","text":"<p>The optimal loading concentration depends on the sequencer used. For the Illumina\u00ae NovaSeq 6000 we obtained optimal clustering at a loading concentration of 130 pM. For the Illumina\u00ae NextSeq 2000 sequencing system we recommend a loading concentration of 650 pM.   </p> <p>Moreover, Illumina suggests a minimum spike-in of 1% PhiX into the pool as a quality control for cluster generation, sequencing, and alignment. </p> <p>In our setup, the following read lengths were used:</p> Read Cycles Read 1 28-37 Index 1 8 Index 2 NA Read2 90+"},{"location":"experimental/sequencing_of_openst_library/#expected-data-output","title":"Expected (data) output","text":"<p>Either when using your own sequencing equipment or relying on a sequencing facility, you will get access to (most likely) already demultiplexed <code>fastq</code> files; otherwise, you can get access to the raw basecall files in <code>bcl</code> format.</p> <p>Either of these files shall be used as the input for spacemake later.</p>"},{"location":"experimental/tissue_processing_and_RNA_qc/","title":"Tissue processing and RNA quality control","text":"<p>Open-ST requires the use of unfixed fresh-frozen tissue. We recommend following 10X Visium's protocol for simultaneous freezing and embedding in their Tissue Preparation guide.</p> <p>Test for RNA quality of the OCT-embedded tissue before working with a tissue.  For this we recommend cutting 5-10 sections of tissue at 10 um thickness. Remove excess OCT as possible and collect the tissue sections in a pre-cooled 1.5 mL tube. Extract total RNA and assess the RNA quality on an automated gel electrophoresis machine, such as the BioAnalyzer or TapeStation. </p> <p>Aim for an RNA integrity number (RIN) over 7. Samples with lower RIN values can be used for Open-ST; however, low RNA integrity negatively impacts library quality.</p>"},{"location":"static/examples/notebooks/hypo_adult_eda/","title":"Exploratory analysis (Jupyter)","text":"<p>We will do some exploratory data analysis on the adult mouse hippocampus dataset that you just preprocessed.</p> <p>Here, we show our code and results as a jupyter notebook, but you can copy and paste the code into a standalone script, and it will still work.</p> <pre><code>import scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n</code></pre> <pre><code>adata = sc.read_h5ad(\"alignment/openst_demo_e13_mouse_by_cell.h5ad\")\n</code></pre> <p>After transfering the segmentation information, the cell with the identifier 0 will have all the transcripts belonging to the background.  Therefore, make sure to omit it from the dataset.</p> <p>Tip</p> <p>We all know that views in <code>anndata</code> can be a bit problematic sometimes... You might want to append <code>.copy()</code> at the end of the following line of code if you encounter issues.</p> <pre><code>adata = adata[adata.obs.cell_ID_mask != 0].copy()\n</code></pre> <pre><code>sc.pp.calculate_qc_metrics(adata, inplace=True)\nadata.var[\"mt\"] = adata.var_names.str.startswith(\"mt-\")\nsc.pp.calculate_qc_metrics(adata, qc_vars=[\"mt\"], inplace=True)\n</code></pre> <pre><code>fig, axs = plt.subplots(1, 3, figsize=(12, 4))\nsns.histplot(adata.obs[\"total_counts\"], kde=False, bins=60, ax=axs[0])\naxs[0].axvline(75, 0,19000)\nsns.histplot(adata.obs[\"pct_counts_mt\"], kde=False, bins=60, ax=axs[1])\nsns.histplot(adata.obs[\"n_genes_by_counts\"], kde=False, bins=60, ax=axs[2])\n</code></pre> <pre>\n<code>&lt;AxesSubplot: xlabel='n_genes_by_counts', ylabel='Count'&gt;</code>\n</pre> <p>Here we apply the following filters, decided by looking at the histogram. You can be more conservative, we chose these in order to keep most of the cells while removing very obvious bad quality data points.</p> <pre><code># Filter data\nsc.pp.filter_cells(adata, min_counts=75)\nsc.pp.filter_cells(adata, max_counts=10000)\n# sc.pp.filter_cells(adata, max_counts=35000)\nadata = adata[adata.obs[\"pct_counts_mt\"] &amp;lt; 30]\nprint(f\"#cells after MT filter: {adata.n_obs}\")\nsc.pp.filter_genes(adata, min_cells=10) \n</code></pre> <pre>\n<code>#cells after MT filter: 39087\n</code>\n</pre> <pre>\n<code>/home/dleonpe/miniconda3/envs/napari-env/lib/python3.9/site-packages/scanpy/preprocessing/_simple.py:251: ImplicitModificationWarning: Trying to modify attribute `.var` of view, initializing view as actual.\n  adata.var['n_cells'] = number\n</code>\n</pre> <p>From this point, some of the analysis decisions are just heuristics taken from single cell analysis. We would not say these are the best possible practices for analyzing this data, but the most common ones. Especially, regarding normalization (see Warning below).</p> <p>Let's apply the common normalization to \\(10^4\\) counts per cell, and the log-normalization with pseudocount. This is supposed to stabilize the variance of genes and remove potential biases from sequencing depth per cell.</p> <pre><code>sc.pp.normalize_total(adata, inplace=True)\nsc.pp.log1p(adata)\n</code></pre> <p>Warning</p> <p>Normalization is necessary, i.e., to account for the differences in depth per cell and remove potential biases, or to estabilize the variance of genes and remove their dependency on the counts. </p> <p>It is still under study, but normalization strategies for single-cell are most likely not well suited for this kind of high-resolution, single-cell spatial data. Especially, since counts have an additional source of (spatial) coviariance that does not exist in single-cell datasets. Therefore, it is possible that the covariance and errors from spatial components are propagated throughout the analysis pipeline, and some signal or significant results are just noise from the spatial autocorrelations. Anyway, we are using these common practices just as a way of getting a feeling about the data, and what could be genes playing a role at specific regions in space.</p> <p>Now, we detect highly variable genes. Any of the <code>flavor</code>(s) are designed with single-cell data in mind, so the list of highly variable genes that they select will be likely affected by the spatial autocorrelation structure. Alternative strategies could be selecting these genes based on the spatial variable genes (e.g., by Moran's I value).</p> <pre><code>sc.pp.highly_variable_genes(adata, flavor=\"seurat\", n_top_genes=2000)\n</code></pre> <p>We perform the dimensionality reduction with PCA, and community clustering of the nearest neighbors graph using the leiden algorithm. For this exploratory analysis, we keep the default parameters.</p> <p>TODO: put the PCA loadings and select from this.</p> <pre><code># Clustering &amp;amp; embedding\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.leiden(adata, resolution = 0.9, key_added=\"leiden\")\n</code></pre> <p>Now we can take a look at the clusters in space. It seems like we recapitulate the major morphological structures from this tissue. We also show Ttr, a marker of the choroid plexus, which seems to be restricted to a specific location in space, that also clusters separately.</p> <pre><code>plt.rcParams[\"figure.figsize\"] = (8, 8)\nsc.pl.spatial(adata, img_key=None, color=[\"total_counts\", \"n_genes_by_counts\", \"leiden\", \"Ttr\"], spot_size=40)\n</code></pre> <p>Notice how we didn't compute the typical UMAP. It might be useful in single cell data, but it does not mean much in this kind of spatial data. Basically, since the data per cell is not normalized using an appropriate method taking into account the spatial autocorrelation, the neighborhood graph might have bias depending on the local environment. Thus, UMAP amplifies this fact and leaves a visualization that is a mere picture of the physical 2d 'neighborhood' topology of the cells, rather than representing the local/global distances in transcriptomic space.</p> <pre><code>sc.tl.umap(adata)\n</code></pre> <pre><code>plt.rcParams[\"figure.figsize\"] = (4, 4)\nsc.pl.umap(adata, color=[\"total_counts\", \"n_genes_by_counts\", \"leiden\", \"Ttr\"], wspace=0.4, legend_loc = \"on data\")\n</code></pre> <pre>\n<code>/home/dleonpe/miniconda3/envs/napari-env/lib/python3.9/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n</code>\n</pre> <p>A better way (compared to UMAP) of showing the pairwise relations of clusters and their transcriptomic identities is to use feature plots like dotplots or matrixplots showing the expression of significant markers of the inferred clusters, sorted following their dendrogram.</p> <pre><code>sc.tl.rank_genes_groups(adata, 'leiden')\nsc.tl.dendrogram(adata, 'leiden')\n</code></pre> <pre><code>sc.pl.rank_genes_groups_dotplot(adata, n_genes=3, standard_scale='var', min_logfoldchange=1)\n</code></pre> <pre>\n<code>/home/dleonpe/miniconda3/envs/napari-env/lib/python3.9/site-packages/scanpy/plotting/_dotplot.py:749: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap', 'norm' will be ignored\n  dot_ax.scatter(x, y, **kwds)\n</code>\n</pre> <p>For instance, this confirms how Ttr is indeed a significant marker of cluster 12, which we could indeed annotate as choroid plexus.</p>"},{"location":"static/examples/notebooks/hypo_adult_eda/#loading-the-modules","title":"Loading the modules","text":""},{"location":"static/examples/notebooks/hypo_adult_eda/#loading-the-data","title":"Loading the data","text":""},{"location":"static/examples/notebooks/hypo_adult_eda/#calculating-qc-metrics-of-the-sample","title":"Calculating QC metrics of the sample","text":"<p>Now, we can show different plots (histograms) to assess the number of unique transcripts (UMIs), genes, percentage of mitochondrial transcripts per segmented cell, as a quick way of assessing the quality of the dataset. This will help to decide on filtering thresholds, to remove potential low quality cells (i.e., due to poor sequencing coverage, or wrong segmentation of background as cells).</p>"},{"location":"static/examples/notebooks/hypo_adult_eda/#normalization","title":"Normalization","text":""},{"location":"static/examples/notebooks/hypo_adult_eda/#dimensionality-reduction-and-clustering","title":"Dimensionality reduction and clustering","text":""},{"location":"static/examples/notebooks/hypo_adult_eda/#marker-genes","title":"Marker genes","text":""}]}